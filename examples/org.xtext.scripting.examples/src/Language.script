import java.math.BigInteger





/******************** Literals ***********************/

null					// Null Literal
'Hello World'		// String Literal
42  		0.42e2		// Number Literals are mostly like in Java
true		false		// Boolean Literal
typeof(String)		// Class Literal (in java : String.class)

// Collection literals via library.
newArrayList(3,5,7)
newHashSet('foo','bar','baz')
newHashMap( 1->'one', 2->'two', 3->'three' )





/******************** Variables ***********************/

val x = 'A final value'	// A final value
var y = 'A non-final variable'  // A non-final variable
val String s = "my String" // The type can be specified optionally





/**************** operators *******************/

1 + 2    1 - 2    1 / 2   1 * 2                   // arithmetic
true && false           true || false		      // boolean logic
1 == 2   1 != 2   1 > 2   1 < 2   1 >= 2   1 <= 2 // comparison
"first" -> "second"                               // tuples
1..30                           // range
null ?: "default"               // Elvis: if(first != null) first else second
"foo" => [ println(charAt(0)) ] // with
(null as String)?.length        // 0 (instead of NPE)					 





/**************** Extension Methods *******************/

"foo bar".nullOrEmpty 			// calls Java method below

// public static boolean isNullOrEmpty(String s) {
//     return s == null || s.length() == 0;
// }





/******************** Closures ***********************/

val x = 'Hello '
val f = [ String e | x + e ]		// closure literal
f.apply('World!')				// returns "Hello World!"


val list = newArrayList('a', 'b', 'c')
list.map[ e | e.toUpperCase ]	// returns [A, B, C]

list.map[ toUpperCase ]	// same behavior; uses implicit variable "it"





/*************** Control Expressions ******************/

val myString = 						// if-expression
		if ('foo'.length > 3) {		    
			'never true!'
		} else {
			'always true!'
		}

// for-each, while, do-while like in Java 

val itemis = newArrayList('foo','bar', 123, 123456789BI)
for(i:itemis) 
	switch i {                 // switch-expression
		case 'foo' : 		"it's foo"
		case 'bar' : 		'a bar'
		Integer case 123: 	'found integer'
		BigInteger: 			"it's huge, soo long:" + i.bitLength
		default : 			"don't know"
	}