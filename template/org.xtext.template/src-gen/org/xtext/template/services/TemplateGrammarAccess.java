/*
* generated by Xtext
*/

package org.xtext.template.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class TemplateGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TemplateFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPackageAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPackageQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cPackageAssignment_1_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsParameterParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBlockStmtParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//TemplateFile:
		//	"<%" ("package" package=QualifiedName)? imports+=Import* params+=Parameter* body=BlockStmt;
		public ParserRule getRule() { return rule; }

		//"<%" ("package" package=QualifiedName)? imports+=Import* params+=Parameter* body=BlockStmt
		public Group getGroup() { return cGroup; }

		//"<%"
		public Keyword getLessThanSignPercentSignKeyword_0() { return cLessThanSignPercentSignKeyword_0; }

		//("package" package=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }

		//"package"
		public Keyword getPackageKeyword_1_0() { return cPackageKeyword_1_0; }

		//package=QualifiedName
		public Assignment getPackageAssignment_1_1() { return cPackageAssignment_1_1; }

		//QualifiedName
		public RuleCall getPackageQualifiedNameParserRuleCall_1_1_0() { return cPackageQualifiedNameParserRuleCall_1_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//params+=Parameter*
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0() { return cParamsParameterParserRuleCall_3_0; }

		//body=BlockStmt
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//BlockStmt
		public RuleCall getBodyBlockStmtParserRuleCall_4_0() { return cBodyBlockStmtParserRuleCall_4_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedName
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameParserRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cParamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0_0 = (RuleCall)cNameAssignment_2_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cDefaultexpAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cDefaultexpXExpressionParserRuleCall_2_0_2_0 = (RuleCall)cDefaultexpAssignment_2_0_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_1_0_0 = (RuleCall)cTypeAssignment_2_1_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_1_0 = (RuleCall)cNameAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cDefaultexpAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cDefaultexpXExpressionParserRuleCall_2_1_2_1_0 = (RuleCall)cDefaultexpAssignment_2_1_2_1.eContents().get(0);
		
		//Parameter:
		//	annotations+=XAnnotation* "param" (name=ID "=" defaultexp=XExpression | type=JvmTypeReference name=ID ("="
		//	defaultexp=XExpression)?);
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* "param" (name=ID "=" defaultexp=XExpression | type=JvmTypeReference name=ID ("="
		//defaultexp=XExpression)?)
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//"param"
		public Keyword getParamKeyword_1() { return cParamKeyword_1; }

		//name=ID "=" defaultexp=XExpression | type=JvmTypeReference name=ID ("=" defaultexp=XExpression)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//name=ID "=" defaultexp=XExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_0_0() { return cNameAssignment_2_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0_0() { return cNameIDTerminalRuleCall_2_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_1() { return cEqualsSignKeyword_2_0_1; }

		//defaultexp=XExpression
		public Assignment getDefaultexpAssignment_2_0_2() { return cDefaultexpAssignment_2_0_2; }

		//XExpression
		public RuleCall getDefaultexpXExpressionParserRuleCall_2_0_2_0() { return cDefaultexpXExpressionParserRuleCall_2_0_2_0; }

		//type=JvmTypeReference name=ID ("=" defaultexp=XExpression)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_1_0() { return cTypeAssignment_2_1_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_1_0_0() { return cTypeJvmTypeReferenceParserRuleCall_2_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_2_1_1() { return cNameAssignment_2_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_1_0() { return cNameIDTerminalRuleCall_2_1_1_0; }

		//("=" defaultexp=XExpression)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_2_0() { return cEqualsSignKeyword_2_1_2_0; }

		//defaultexp=XExpression
		public Assignment getDefaultexpAssignment_2_1_2_1() { return cDefaultexpAssignment_2_1_2_1; }

		//XExpression
		public RuleCall getDefaultexpXExpressionParserRuleCall_2_1_2_1_0() { return cDefaultexpXExpressionParserRuleCall_2_1_2_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructuralStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	BlockStmt | StructuralStmt | ExpressionStmt;
		public ParserRule getRule() { return rule; }

		//BlockStmt | StructuralStmt | ExpressionStmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//BlockStmt
		public RuleCall getBlockStmtParserRuleCall_0() { return cBlockStmtParserRuleCall_0; }

		//StructuralStmt
		public RuleCall getStructuralStmtParserRuleCall_1() { return cStructuralStmtParserRuleCall_1; }

		//ExpressionStmt
		public RuleCall getExpressionStmtParserRuleCall_2() { return cExpressionStmtParserRuleCall_2; }
	}

	public class BlockStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cStatementsTextStmtStmtParserRuleCall_1_0_0_0 = (RuleCall)cStatementsAssignment_1_0_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cStatementsStructuralStmtParserRuleCall_1_0_1_0 = (RuleCall)cStatementsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cStatementsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cStatementsTextStmtExpParserRuleCall_1_1_0_0 = (RuleCall)cStatementsAssignment_1_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStatementsExpressionStmtParserRuleCall_1_1_1_0 = (RuleCall)cStatementsAssignment_1_1_1.eContents().get(0);
		
		//BlockStmt:
		//	{BlockStmt} (statements+=TextStmtStmt statements+=StructuralStmt? | statements+=TextStmtExp
		//	statements+=ExpressionStmt?)*;
		public ParserRule getRule() { return rule; }

		//{BlockStmt} (statements+=TextStmtStmt statements+=StructuralStmt? | statements+=TextStmtExp
		//statements+=ExpressionStmt?)*
		public Group getGroup() { return cGroup; }

		//{BlockStmt}
		public Action getBlockStmtAction_0() { return cBlockStmtAction_0; }

		//(statements+=TextStmtStmt statements+=StructuralStmt? | statements+=TextStmtExp statements+=ExpressionStmt?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//statements+=TextStmtStmt statements+=StructuralStmt?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//statements+=TextStmtStmt
		public Assignment getStatementsAssignment_1_0_0() { return cStatementsAssignment_1_0_0; }

		//TextStmtStmt
		public RuleCall getStatementsTextStmtStmtParserRuleCall_1_0_0_0() { return cStatementsTextStmtStmtParserRuleCall_1_0_0_0; }

		//statements+=StructuralStmt?
		public Assignment getStatementsAssignment_1_0_1() { return cStatementsAssignment_1_0_1; }

		//StructuralStmt
		public RuleCall getStatementsStructuralStmtParserRuleCall_1_0_1_0() { return cStatementsStructuralStmtParserRuleCall_1_0_1_0; }

		//statements+=TextStmtExp statements+=ExpressionStmt?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//statements+=TextStmtExp
		public Assignment getStatementsAssignment_1_1_0() { return cStatementsAssignment_1_1_0; }

		//TextStmtExp
		public RuleCall getStatementsTextStmtExpParserRuleCall_1_1_0_0() { return cStatementsTextStmtExpParserRuleCall_1_1_0_0; }

		//statements+=ExpressionStmt?
		public Assignment getStatementsAssignment_1_1_1() { return cStatementsAssignment_1_1_1; }

		//ExpressionStmt
		public RuleCall getStatementsExpressionStmtParserRuleCall_1_1_1_0() { return cStatementsExpressionStmtParserRuleCall_1_1_1_0; }
	}

	public class StructuralStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructuralStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StructuralStmt:
		//	ForStmt | IfStmt;
		public ParserRule getRule() { return rule; }

		//ForStmt | IfStmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//ForStmt
		public RuleCall getForStmtParserRuleCall_0() { return cForStmtParserRuleCall_0; }

		//IfStmt
		public RuleCall getIfStmtParserRuleCall_1() { return cIfStmtParserRuleCall_1; }
	}

	public class ExpressionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionStmt");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodyXExpressionParserRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		//ExpressionStmt:
		//	body=XExpression;
		public ParserRule getRule() { return rule; }

		//body=XExpression
		public Assignment getBodyAssignment() { return cBodyAssignment; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_0() { return cBodyXExpressionParserRuleCall_0; }
	}

	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamJvmFormalParameterParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceXExpressionParserRuleCall_3_0 = (RuleCall)cSourceAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBlockStmtParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cEndforKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ForStmt:
		//	"for" param=JvmFormalParameter ":" source=XExpression body=BlockStmt "endfor";
		public ParserRule getRule() { return rule; }

		//"for" param=JvmFormalParameter ":" source=XExpression body=BlockStmt "endfor"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//param=JvmFormalParameter
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }

		//JvmFormalParameter
		public RuleCall getParamJvmFormalParameterParserRuleCall_1_0() { return cParamJvmFormalParameterParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//source=XExpression
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }

		//XExpression
		public RuleCall getSourceXExpressionParserRuleCall_3_0() { return cSourceXExpressionParserRuleCall_3_0; }

		//body=BlockStmt
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//BlockStmt
		public RuleCall getBodyBlockStmtParserRuleCall_4_0() { return cBodyBlockStmtParserRuleCall_4_0; }

		//"endfor"
		public Keyword getEndforKeyword_5() { return cEndforKeyword_5; }
	}

	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIfbodiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfbodiesIfStmtBodyParserRuleCall_1_0 = (RuleCall)cIfbodiesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseifKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIfbodiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIfbodiesIfStmtBodyParserRuleCall_2_1_0 = (RuleCall)cIfbodiesAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cEndifKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cElseKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElsebodyAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElsebodyBlockStmtParserRuleCall_3_1_1_0 = (RuleCall)cElsebodyAssignment_3_1_1.eContents().get(0);
		private final Keyword cEndifKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//IfStmt:
		//	"if" ifbodies+=IfStmtBody ("elseif" ifbodies+=IfStmtBody)* ("endif" | "else" elsebody=BlockStmt "endif");
		public ParserRule getRule() { return rule; }

		//"if" ifbodies+=IfStmtBody ("elseif" ifbodies+=IfStmtBody)* ("endif" | "else" elsebody=BlockStmt "endif")
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//ifbodies+=IfStmtBody
		public Assignment getIfbodiesAssignment_1() { return cIfbodiesAssignment_1; }

		//IfStmtBody
		public RuleCall getIfbodiesIfStmtBodyParserRuleCall_1_0() { return cIfbodiesIfStmtBodyParserRuleCall_1_0; }

		//("elseif" ifbodies+=IfStmtBody)*
		public Group getGroup_2() { return cGroup_2; }

		//"elseif"
		public Keyword getElseifKeyword_2_0() { return cElseifKeyword_2_0; }

		//ifbodies+=IfStmtBody
		public Assignment getIfbodiesAssignment_2_1() { return cIfbodiesAssignment_2_1; }

		//IfStmtBody
		public RuleCall getIfbodiesIfStmtBodyParserRuleCall_2_1_0() { return cIfbodiesIfStmtBodyParserRuleCall_2_1_0; }

		//"endif" | "else" elsebody=BlockStmt "endif"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"endif"
		public Keyword getEndifKeyword_3_0() { return cEndifKeyword_3_0; }

		//"else" elsebody=BlockStmt "endif"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"else"
		public Keyword getElseKeyword_3_1_0() { return cElseKeyword_3_1_0; }

		//elsebody=BlockStmt
		public Assignment getElsebodyAssignment_3_1_1() { return cElsebodyAssignment_3_1_1; }

		//BlockStmt
		public RuleCall getElsebodyBlockStmtParserRuleCall_3_1_1_0() { return cElsebodyBlockStmtParserRuleCall_3_1_1_0; }

		//"endif"
		public Keyword getEndifKeyword_3_1_2() { return cEndifKeyword_3_1_2; }
	}

	public class IfStmtBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStmtBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionXExpressionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockStmtParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//IfStmtBody:
		//	condition=XExpression body=BlockStmt;
		public ParserRule getRule() { return rule; }

		//condition=XExpression body=BlockStmt
		public Group getGroup() { return cGroup; }

		//condition=XExpression
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }

		//XExpression
		public RuleCall getConditionXExpressionParserRuleCall_0_0() { return cConditionXExpressionParserRuleCall_0_0; }

		//body=BlockStmt
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//BlockStmt
		public RuleCall getBodyBlockStmtParserRuleCall_1_0() { return cBodyBlockStmtParserRuleCall_1_0; }
	}

	public class TextStmtStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextStmtStmt");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTextAlternatives_0 = (Alternatives)cTextAssignment.eContents().get(0);
		private final RuleCall cTextTEXT_EXP2STMTerminalRuleCall_0_0 = (RuleCall)cTextAlternatives_0.eContents().get(0);
		private final RuleCall cTextTEXT_STM2STMTerminalRuleCall_0_1 = (RuleCall)cTextAlternatives_0.eContents().get(1);
		
		//TextStmtStmt returns TextStmt:
		//	text=(TEXT_EXP2STM | TEXT_STM2STM);
		public ParserRule getRule() { return rule; }

		//text=(TEXT_EXP2STM | TEXT_STM2STM)
		public Assignment getTextAssignment() { return cTextAssignment; }

		//TEXT_EXP2STM | TEXT_STM2STM
		public Alternatives getTextAlternatives_0() { return cTextAlternatives_0; }

		//TEXT_EXP2STM
		public RuleCall getTextTEXT_EXP2STMTerminalRuleCall_0_0() { return cTextTEXT_EXP2STMTerminalRuleCall_0_0; }

		//TEXT_STM2STM
		public RuleCall getTextTEXT_STM2STMTerminalRuleCall_0_1() { return cTextTEXT_STM2STMTerminalRuleCall_0_1; }
	}

	public class TextStmtExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextStmtExp");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTextAlternatives_0 = (Alternatives)cTextAssignment.eContents().get(0);
		private final RuleCall cTextTEXT_EXP2EXPTerminalRuleCall_0_0 = (RuleCall)cTextAlternatives_0.eContents().get(0);
		private final RuleCall cTextTEXT_STM2EXPTerminalRuleCall_0_1 = (RuleCall)cTextAlternatives_0.eContents().get(1);
		
		//TextStmtExp returns TextStmt:
		//	text=(TEXT_EXP2EXP | TEXT_STM2EXP);
		public ParserRule getRule() { return rule; }

		//text=(TEXT_EXP2EXP | TEXT_STM2EXP)
		public Assignment getTextAssignment() { return cTextAssignment; }

		//TEXT_EXP2EXP | TEXT_STM2EXP
		public Alternatives getTextAlternatives_0() { return cTextAlternatives_0; }

		//TEXT_EXP2EXP
		public RuleCall getTextTEXT_EXP2EXPTerminalRuleCall_0_0() { return cTextTEXT_EXP2EXPTerminalRuleCall_0_0; }

		//TEXT_STM2EXP
		public RuleCall getTextTEXT_STM2EXPTerminalRuleCall_0_1() { return cTextTEXT_STM2EXPTerminalRuleCall_0_1; }
	}
	
	
	private TemplateFileElements pTemplateFile;
	private ImportElements pImport;
	private ParameterElements pParameter;
	private StatementElements pStatement;
	private BlockStmtElements pBlockStmt;
	private StructuralStmtElements pStructuralStmt;
	private ExpressionStmtElements pExpressionStmt;
	private ForStmtElements pForStmt;
	private IfStmtElements pIfStmt;
	private IfStmtBodyElements pIfStmtBody;
	private TextStmtStmtElements pTextStmtStmt;
	private TextStmtExpElements pTextStmtExp;
	private TerminalRule tTEXT_EXP2EXP;
	private TerminalRule tTEXT_EXP2STM;
	private TerminalRule tTEXT_STM2STM;
	private TerminalRule tTEXT_STM2EXP;
	private TerminalRule tIN_STRING;
	
	private final Grammar grammar;

	private XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	@Inject
	public TemplateGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.template.Template".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	
	//TemplateFile:
	//	"<%" ("package" package=QualifiedName)? imports+=Import* params+=Parameter* body=BlockStmt;
	public TemplateFileElements getTemplateFileAccess() {
		return (pTemplateFile != null) ? pTemplateFile : (pTemplateFile = new TemplateFileElements());
	}
	
	public ParserRule getTemplateFileRule() {
		return getTemplateFileAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedName;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Parameter:
	//	annotations+=XAnnotation* "param" (name=ID "=" defaultexp=XExpression | type=JvmTypeReference name=ID ("="
	//	defaultexp=XExpression)?);
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Statement:
	//	BlockStmt | StructuralStmt | ExpressionStmt;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//BlockStmt:
	//	{BlockStmt} (statements+=TextStmtStmt statements+=StructuralStmt? | statements+=TextStmtExp
	//	statements+=ExpressionStmt?)*;
	public BlockStmtElements getBlockStmtAccess() {
		return (pBlockStmt != null) ? pBlockStmt : (pBlockStmt = new BlockStmtElements());
	}
	
	public ParserRule getBlockStmtRule() {
		return getBlockStmtAccess().getRule();
	}

	//StructuralStmt:
	//	ForStmt | IfStmt;
	public StructuralStmtElements getStructuralStmtAccess() {
		return (pStructuralStmt != null) ? pStructuralStmt : (pStructuralStmt = new StructuralStmtElements());
	}
	
	public ParserRule getStructuralStmtRule() {
		return getStructuralStmtAccess().getRule();
	}

	//ExpressionStmt:
	//	body=XExpression;
	public ExpressionStmtElements getExpressionStmtAccess() {
		return (pExpressionStmt != null) ? pExpressionStmt : (pExpressionStmt = new ExpressionStmtElements());
	}
	
	public ParserRule getExpressionStmtRule() {
		return getExpressionStmtAccess().getRule();
	}

	//ForStmt:
	//	"for" param=JvmFormalParameter ":" source=XExpression body=BlockStmt "endfor";
	public ForStmtElements getForStmtAccess() {
		return (pForStmt != null) ? pForStmt : (pForStmt = new ForStmtElements());
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}

	//IfStmt:
	//	"if" ifbodies+=IfStmtBody ("elseif" ifbodies+=IfStmtBody)* ("endif" | "else" elsebody=BlockStmt "endif");
	public IfStmtElements getIfStmtAccess() {
		return (pIfStmt != null) ? pIfStmt : (pIfStmt = new IfStmtElements());
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}

	//IfStmtBody:
	//	condition=XExpression body=BlockStmt;
	public IfStmtBodyElements getIfStmtBodyAccess() {
		return (pIfStmtBody != null) ? pIfStmtBody : (pIfStmtBody = new IfStmtBodyElements());
	}
	
	public ParserRule getIfStmtBodyRule() {
		return getIfStmtBodyAccess().getRule();
	}

	//TextStmtStmt returns TextStmt:
	//	text=(TEXT_EXP2STM | TEXT_STM2STM);
	public TextStmtStmtElements getTextStmtStmtAccess() {
		return (pTextStmtStmt != null) ? pTextStmtStmt : (pTextStmtStmt = new TextStmtStmtElements());
	}
	
	public ParserRule getTextStmtStmtRule() {
		return getTextStmtStmtAccess().getRule();
	}

	//TextStmtExp returns TextStmt:
	//	text=(TEXT_EXP2EXP | TEXT_STM2EXP);
	public TextStmtExpElements getTextStmtExpAccess() {
		return (pTextStmtExp != null) ? pTextStmtExp : (pTextStmtExp = new TextStmtExpElements());
	}
	
	public ParserRule getTextStmtExpRule() {
		return getTextStmtExpAccess().getRule();
	}

	//terminal TEXT_EXP2EXP:
	//	"?>" IN_STRING* ("<?" | EOF);
	public TerminalRule getTEXT_EXP2EXPRule() {
		return (tTEXT_EXP2EXP != null) ? tTEXT_EXP2EXP : (tTEXT_EXP2EXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXT_EXP2EXP"));
	} 

	//terminal TEXT_EXP2STM:
	//	"?>" IN_STRING* ("<%" | EOF);
	public TerminalRule getTEXT_EXP2STMRule() {
		return (tTEXT_EXP2STM != null) ? tTEXT_EXP2STM : (tTEXT_EXP2STM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXT_EXP2STM"));
	} 

	//terminal TEXT_STM2STM:
	//	"%>" IN_STRING* ("<%" | EOF);
	public TerminalRule getTEXT_STM2STMRule() {
		return (tTEXT_STM2STM != null) ? tTEXT_STM2STM : (tTEXT_STM2STM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXT_STM2STM"));
	} 

	//terminal TEXT_STM2EXP:
	//	"%>" IN_STRING* ("<?" | EOF);
	public TerminalRule getTEXT_STM2EXPRule() {
		return (tTEXT_STM2EXP != null) ? tTEXT_STM2EXP : (tTEXT_STM2EXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXT_STM2EXP"));
	} 

	//terminal fragment IN_STRING:
	//	"<" !("%" | "?") | !"<";
	public TerminalRule getIN_STRINGRule() {
		return (tIN_STRING != null) ? tIN_STRING : (tIN_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IN_STRING"));
	} 

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValue)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	element=[types::JvmOperation|ValidID] "=" value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueStringConcatenation returns xbase::XExpression:
	//	XAnnotationElementValue ({XAnnotationElementValueBinaryOperation.leftOperand=current} operator="+"
	//	rightOperand=XAnnotationElementValue)*;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueStringConcatenationElements getXAnnotationElementValueStringConcatenationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueStringConcatenationAccess();
	}
	
	public ParserRule getXAnnotationElementValueStringConcatenationRule() {
		return getXAnnotationElementValueStringConcatenationAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	XAnnotation | XAnnotationValueArray | XStringLiteral | XBooleanLiteral | XNumberLiteral | XTypeLiteral |
	//	XAnnotationValueFieldReference | "(" XAnnotationElementValueStringConcatenation ")";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationValueFieldReference returns xbase::XExpression:
	//	{xbase::XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper];
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueFieldReferenceElements getXAnnotationValueFieldReferenceAccess() {
		return gaXbaseWithAnnotations.getXAnnotationValueFieldReferenceAccess();
	}
	
	public ParserRule getXAnnotationValueFieldReferenceRule() {
		return getXAnnotationValueFieldReferenceAccess().getRule();
	}

	//XAnnotationValueArray returns xbase::XExpression:
	//	{XAnnotationValueArray} "{" values+=XAnnotationElementValue ("," values+=XAnnotationElementValue)* "}";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueArrayElements getXAnnotationValueArrayAccess() {
		return gaXbaseWithAnnotations.getXAnnotationValueArrayAccess();
	}
	
	public ParserRule getXAnnotationValueArrayRule() {
		return getXAnnotationValueArrayAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbaseWithAnnotations.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbaseWithAnnotations.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbaseWithAnnotations.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbaseWithAnnotations.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbaseWithAnnotations.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbaseWithAnnotations.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbaseWithAnnotations.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbaseWithAnnotations.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbaseWithAnnotations.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbaseWithAnnotations.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbaseWithAnnotations.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbaseWithAnnotations.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbaseWithAnnotations.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbaseWithAnnotations.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbaseWithAnnotations.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbaseWithAnnotations.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbaseWithAnnotations.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbaseWithAnnotations.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbaseWithAnnotations.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbaseWithAnnotations.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbaseWithAnnotations.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbaseWithAnnotations.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbaseWithAnnotations.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbaseWithAnnotations.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbaseWithAnnotations.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbaseWithAnnotations.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbaseWithAnnotations.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbaseWithAnnotations.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbaseWithAnnotations.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbaseWithAnnotations.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbaseWithAnnotations.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbaseWithAnnotations.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbaseWithAnnotations.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbaseWithAnnotations.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbaseWithAnnotations.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbaseWithAnnotations.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbaseWithAnnotations.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbaseWithAnnotations.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbaseWithAnnotations.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbaseWithAnnotations.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbaseWithAnnotations.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbaseWithAnnotations.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbaseWithAnnotations.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbaseWithAnnotations.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbaseWithAnnotations.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbaseWithAnnotations.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbaseWithAnnotations.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbaseWithAnnotations.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbaseWithAnnotations.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbaseWithAnnotations.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbaseWithAnnotations.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbaseWithAnnotations.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbaseWithAnnotations.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbaseWithAnnotations.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbaseWithAnnotations.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbaseWithAnnotations.getANY_OTHERRule();
	} 
}
