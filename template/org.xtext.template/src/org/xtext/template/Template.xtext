grammar org.xtext.template.Template with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate template "http://www.itemis.de/xtl/XTL"
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TemplateFile:
	"<%" ("package" package=QualifiedName)? imports+=Import* params+=Parameter* body=BlockStmt;

Import:
	"import" importedNamespace=QualifiedName;

Parameter:
	annotations+=XAnnotation* "param" type=JvmTypeReference name=ID ("=" defaultexp=XExpression)?;

Statement:
	BlockStmt | StructuralStmt | ExpressionStmt;

BlockStmt:
	{BlockStmt}
	(
		statements+=TextStmtStmt statements+=StructuralStmt? |
		statements+=TextStmtExp statements+=ExpressionStmt?
	)*;

StructuralStmt:
	ForStmt | IfStmt;

ExpressionStmt:
	body=XExpression;

ForStmt:
	'for' param=JvmFormalParameter ':' source=XExpression body=BlockStmt 'endfor';

IfStmt:
	'if' ifbodies+=IfStmtBody ('elseif' ifbodies+=IfStmtBody)* ('endif' | 'else' elsebody=BlockStmt 'endif');

IfStmtBody:
	condition=XExpression body=BlockStmt;

TextStmtStmt returns TextStmt:
	text=(TEXT_EXP2STM | TEXT_STM2STM);

TextStmtExp returns TextStmt:
	text=(TEXT_EXP2EXP | TEXT_STM2EXP);

terminal TEXT_EXP2EXP: '?>' IN_STRING* ('<?' | EOF);
terminal TEXT_EXP2STM: '?>' IN_STRING* ('<%' | EOF);
terminal TEXT_STM2STM: '%>' IN_STRING* ('<%' | EOF);
terminal TEXT_STM2EXP: '%>' IN_STRING* ('<?' | EOF);
terminal fragment IN_STRING: ('<' !('%' | '?') | !'<');


